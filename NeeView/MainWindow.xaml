<!--
    Copyright (c) 2016 Mitsuhiro Ito (nee)

    This software is released under the MIT License.
    http://opensource.org/licenses/mit-license.php
-->

<Window x:Class="NeeView.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:NeeView"
        xmlns:osc="clr-namespace:OpenSourceControls"
        mc:Ignorable="d"
        Title="{Binding WindowTitle}" Icon="{Binding WindowIcon}" Height="768" Width="1024" AllowDrop="True"
        Topmost="{Binding IsTopmost}"
        Loaded="MainWindow_Loaded" PreviewDragOver="MainWindow_PreviewDragOver" Drop="MainWindow_Drop" Closed="Window_Closed" Closing="Window_Closing" SourceInitialized="Window_SourceInitialized">

    <!--"{x:Static SystemParameters.CaptionHeight}"-->
    <!--
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="0"
                      ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}" 
                      UseAeroCaptionButtons="True"
                      />
    </WindowChrome.WindowChrome>
    -->

    <Window.Resources>

        <Style x:Key="VisibleContent" TargetType="FrameworkElement">
            <Setter Property="Opacity" Value="1"/>
        </Style>

        <Style x:Key="AutoHideContent" TargetType="FrameworkElement">
            <Setter Property="Opacity" Value="0"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Opacity" Value="1"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <!-- Styling the DockPanelSplitter -->
        <Style x:Key="NVHorizontalBevelGrip" TargetType="{x:Type osc:DockPanelSplitter}">
            <Setter Property="Thickness" Value="6"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type osc:DockPanelSplitter}">
                        <Grid SnapsToDevicePixels="True" Background="{DynamicResource NVBackground}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="NVVerticalBevelGrip" TargetType="{x:Type osc:DockPanelSplitter}">
            <Setter Property="Thickness" Value="6"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type osc:DockPanelSplitter}">
                        <Grid SnapsToDevicePixels="True" Background="{DynamicResource NVBackground}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>




        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

        <local:IsGreaterThanConverter x:Key="IsGreaterThanConverter"/>
        <local:IsLessThanConverter x:Key="IsLessThanConverter"/>

    </Window.Resources>


    <DockPanel>

        <!-- 開発用 ページリスト -->
        <!--
        <ScrollViewer x:Name="DevPageList" DockPanel.Dock="Right" Width="300" Panel.ZIndex="100" HorizontalScrollBarVisibility="Auto"
            Visibility="{Binding ElementName=MenuItemDevPageList, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}">
            <ListView ItemsSource="{Binding PageList}" >
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="名前"  DisplayMemberBinding="{Binding FileName}" Width="100"/>
                        <GridViewColumn Header="状態"  DisplayMemberBinding="{Binding Message}" Width="150"/>
                    </GridView>
                </ListView.View>
            </ListView>
        </ScrollViewer>
        -->

        <!-- 開発用 表示領域-->
        <!--
        <DockPanel x:Name="DevInfo" DockPanel.Dock="Bottom" Panel.ZIndex="100" Background="White"
                  Visibility="{Binding ElementName=MenuItemDevInfo, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}">
            <StackPanel DockPanel.Dock="Top" Orientation="Horizontal">
                <Button Content="Update" Width="100" Click="UpdateContentPoint_Click"/>
                <TextBlock Text="{Binding ContentPosition}" Margin="5"/>
            </StackPanel>
            <TextBlock DockPanel.Dock="Top" Text="{Binding JobEngine.JobCount}"/>
            <TextBlock DockPanel.Dock="Top" Text="{Binding JobEngine.Message}"/>
            <TextBlock DockPanel.Dock="Top" Text="{Binding JobEngine.Workers[0].Message}"/>
            <TextBlock DockPanel.Dock="Top" Text="{Binding JobEngine.Workers[1].Message}"/>
            <TextBlock DockPanel.Dock="Top" Text="{Binding JobEngine.Workers[2].Message}"/>
            <TextBlock DockPanel.Dock="Top" Text="{Binding JobEngine.Workers[3].Message}"/>
        </DockPanel>
        -->

        <!-- 製品表示領域 -->
        <Grid x:Name="Root" Background="{Binding BackgroundBrush}">

            <!--  ビューエリア -->
            <DockPanel x:Name="ViewArea">

                <!-- フォルダリスト -->
                <local:FolderListControl x:Name="FolderListArea" DockPanel.Dock="{Binding FolderListSetting.Dock}"  Width="250"
                                        BookHub="{Binding BookHub}"/>
                <osc:DockPanelSplitter x:Name="FolderListSplitter" DockPanel.Dock="{Binding FolderListSetting.Dock}" Style="{StaticResource NVVerticalBevelGrip}" ProportionalResize="False"
                                       Visibility="{Binding ElementName=FolderListArea, Path=Visibility}" />

                <!-- 情報エリア -->
                <Grid x:Name="InfoArea" DockPanel.Dock="{Binding FileInfoSetting.Dock}" Width="250" MouseLeftButtonDown="InfoArea_MouseLeftButtonDown">
                    <local:FileInfoControl Setting="{Binding DataContext.FileInfoSetting, RelativeSource={RelativeSource AncestorType=Window}, Mode=TwoWay}" DataContext="{Binding FileInfoContent}" d:IsHidden="True"/>
                </Grid>
                <osc:DockPanelSplitter x:Name="InfoAreaSplitter" DockPanel.Dock="{Binding FileInfoSetting.Dock}" Style="{StaticResource NVVerticalBevelGrip}" ProportionalResize="False"
                                       Visibility="{Binding ElementName=InfoArea, Path=Visibility}" />

                <!-- メインビュー -->
                <Grid Panel.ZIndex="-1">
                    <!-- メインビュー コンテンツ表示領域 -->
                    <Grid x:Name="MainView" Background="{Binding BackgroundBrush}" SizeChanged="MainView_SizeChanged" Focusable="True" >
                        <!-- Pages -->
                        <Canvas Width="{Binding ElementName=MainContent, Path=ActualWidth}" Height="{Binding ElementName=MainContent, Path=ActualHeight}"
                        HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Canvas.Resources>
                                <Style TargetType="TextBlock" x:Key="ContentProperty">
                                    <Setter Property="Foreground" Value="White"/>
                                    <Setter Property="Background" Value="#80000000"/>
                                    <Setter Property="Padding" Value="10,5"/>
                                    <Style.Triggers>
                                        <Trigger Property="Text" Value="">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Canvas.Resources>
                            <StackPanel x:Name="MainContent" Orientation="Horizontal">
                                <ContentControl x:Name="Content1" Content="{Binding Contents[1].Content}" Width="{Binding Contents[1].Width}" Height="{Binding Contents[1].Height}" Focusable="False" />
                                <ContentControl x:Name="Content0" Content="{Binding Contents[0].Content}" Width="{Binding Contents[0].Width}" Height="{Binding Contents[0].Height}" Focusable="False" Margin="{Binding ContentsMargin}"/>
                            </StackPanel>
                        </Canvas>
                        <!-- Pages Shadow (表示領域計算用) -->
                        <Canvas Width="{Binding ElementName=MainContent, Path=ActualWidth}" Height="{Binding ElementName=MainContent, Path=ActualHeight}"
                        HorizontalAlignment="Center" VerticalAlignment="Center">
                            <StackPanel x:Name="MainContentShadow" Orientation="Horizontal">
                                <Rectangle x:Name="Content1Shadow" Visibility="Hidden" Fill="#88FF0000" Width="{Binding Contents[1].Width}" Height="{Binding Contents[1].Height}"/>
                                <Rectangle x:Name="Content0Shadow" Visibility="Hidden" Fill="#88FF0000" Width="{Binding Contents[0].Width}" Height="{Binding Contents[0].Height}" Margin="{Binding ContentsMargin}"/>
                            </StackPanel>
                        </Canvas>
                    </Grid>

                    <!-- empty pages message -->
                    <Grid Visibility="{Binding IsVisibleEmptyPageMessage, Converter={StaticResource BooleanToVisibilityConverter}}" d:IsHidden="True"  IsHitTestVisible="False">
                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                            <TextBlock  Text="読み込めるファイルがありません" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="{Binding InfoTextFontSize}" FontFamily="Meiryo" Foreground="{Binding ForegroundBrush}"/>

                            <TextBlock Text="{Binding EmptyPageMessage}" Foreground="{Binding ForegroundBrush}" HorizontalAlignment="Center" Margin="0,20,0,0" MinHeight="50" TextWrapping="Wrap" >
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <Trigger Property="Text" Value="">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </Trigger>
                                        </Style.Triggers>

                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </Grid>

                    <!-- Now Loading -->
                    <Grid x:Name="NowLoading" Opacity="0" IsHitTestVisible="False">
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ElementName=NowLoading, Path=Opacity, Converter={StaticResource IsLessThanConverter}, ConverterParameter=0.01}" Value="True">
                                        <Setter Property="Visibility" Value="Hidden"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <Grid x:Name="NowLoadingNormal" Background="Black">
                            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Orientation="Vertical">
                                <TextBlock x:Name="NowLoadingText" Text="Now Loading"  TextAlignment="Center" VerticalAlignment="Center"
                           Foreground="White" FontFamily="Meiryo" FontSize="{Binding InfoTextFontSize}" Margin="8" TextTrimming="CharacterEllipsis"/>
                                <Grid Width="50" Height="50">
                                    <Rectangle Width="5" Height="25" Fill="#FF00B5FF" RenderTransformOrigin="0.5,0.5">
                                        <Rectangle.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform x:Name="NowLoadingMarkAngle" Angle="45"/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Rectangle.RenderTransform>
                                    </Rectangle>
                                </Grid>
                            </StackPanel>
                        </Grid>

                        <TextBlock x:Name="NowLoadingTiny" Text="Now Loading ..." VerticalAlignment="Bottom" HorizontalAlignment="Right" Foreground="White" Background="#88000000" Padding="20,5" IsHitTestVisible="False"/>
                    </Grid>
                </Grid>

            </DockPanel>

            <!-- メニューエリア-->
            <Grid x:Name="MenuArea" VerticalAlignment="Top">
                <Menu x:Name="MainMenu" VerticalAlignment="Top">
                    <Menu.Resources>
                        <local:PageModeToBooleanConverter x:Key="PageModeToBooleanConverter"/>
                        <local:StretchModeToBooleanConverter x:Key="StretchModeToBooleanConverter"/>
                        <local:SortModeToBooleanConverter x:Key="SortModeToBooleanConverter"/>
                        <local:BookReadOrderToBooleanConverter x:Key="BookReadOrderToBooleanConverter"/>
                        <local:FolderOrderToBooleanConverter x:Key="FolderOrderToBooleanConverter"/>
                        <local:FullPathToFileNameConverter x:Key="FullPathToFileNameConverter"/>
                        <local:BackgroundStyleToBooleanConverter x:Key="BackgroundStyleToBooleanConverter"/>
                    </Menu.Resources>

                    <MenuItem Header="ファイル(_F)">
                        <MenuItem Header="開く(_O)..." Command="{Binding BookCommands[LoadAs]}"/>
                        <MenuItem Header="最近使ったフォルダ" ItemsSource="{Binding LastFiles}" x:Name="LastFilesHeader" IsEnabled="{Binding IsEnableLastFiles}">
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="MenuItem">
                                    <Setter Property="Header" Value="{Binding Path=Place, Converter={StaticResource FullPathToFileNameConverter}}"/>
                                    <Setter Property="Command" Value="{Binding BookCommands[LoadAs], RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                                    <Setter Property="CommandParameter" Value="{Binding Path=Place}" />
                                    <Setter Property="InputGestureText" Value=""/>
                                </Style>
                            </MenuItem.ItemContainerStyle>
                            <MenuItem.Style>
                                <Style TargetType="MenuItem">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=LastFilesHeader, Path=ItemsSource.Count}" Value="0" >
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="外部アプリで開く" Command="{Binding BookCommands[OpenApplication]}"/>
                        <MenuItem Header="エクスプローラーで開く" Command="{Binding BookCommands[OpenFilePlace]}"/>
                        <Separator/>
                        <MenuItem Header="保存(_S)..." Command="{Binding BookCommands[Export]}"/>
                        <MenuItem Header="削除(_D)" Command="{Binding BookCommands[DeleteFile]}" />
                        <Separator/>
                        <MenuItem Header="終了(_X)" x:Name="ExitMenuItem" InputGestureText="Alt+F4" Command="{Binding BookCommands[CloseApplication]}" />
                    </MenuItem>

                    <MenuItem Header="表示(_V)">
                        <MenuItem Header="オリジナルサイズ" Command="{Binding BookCommands[SetStretchModeNone]}"
                              IsChecked="{Binding StretchMode,Converter={StaticResource StretchModeToBooleanConverter},ConverterParameter=None,Mode=OneWay}" />
                        <MenuItem Header="大きい場合はウィンドウサイズに合わせる" Command="{Binding BookCommands[SetStretchModeInside]}"
                              IsChecked="{Binding StretchMode,Converter={StaticResource StretchModeToBooleanConverter},ConverterParameter=Inside,Mode=OneWay}" />
                        <MenuItem Header="小さい場合はウィンドウサイズに合わせる" Command="{Binding BookCommands[SetStretchModeOutside]}"
                              IsChecked="{Binding StretchMode,Converter={StaticResource StretchModeToBooleanConverter},ConverterParameter=Outside,Mode=OneWay}" />
                        <MenuItem Header="ウィンドウサイズに合わせる" Command="{Binding BookCommands[SetStretchModeUniform]}"
                              IsChecked="{Binding StretchMode,Converter={StaticResource StretchModeToBooleanConverter},ConverterParameter=Uniform,Mode=OneWay}" />
                        <MenuItem Header="ウィンドウいっぱいに広げる" Command="{Binding BookCommands[SetStretchModeUniformToFill]}"
                              IsChecked="{Binding StretchMode,Converter={StaticResource StretchModeToBooleanConverter},ConverterParameter=UniformToFill,Mode=OneWay}" />
                        <MenuItem Header="面積をウィンドウに合わせる" Command="{Binding BookCommands[SetStretchModeUniformToSize]}"
                              IsChecked="{Binding StretchMode,Converter={StaticResource StretchModeToBooleanConverter},ConverterParameter=UniformToSize,Mode=OneWay}" />
                        <MenuItem Header="高さをウィンドウに合わせる" Command="{Binding BookCommands[SetStretchModeUniformToVertical]}"
                              IsChecked="{Binding StretchMode,Converter={StaticResource StretchModeToBooleanConverter},ConverterParameter=UniformToVertical,Mode=OneWay}" />
                        <Separator/>
                        <MenuItem Header="ドットのまま拡大する" Command="{Binding BookCommands[ToggleIsEnabledNearestNeighbor]}"
                            IsChecked="{Binding IsEnabledNearestNeighbor,Mode=OneWay}" />
                        <Separator/>
                        <MenuItem Header="背景を黒色にする" Command="{Binding BookCommands[SetBackgroundBlack]}"
                              IsChecked="{Binding Background,Converter={StaticResource BackgroundStyleToBooleanConverter},ConverterParameter=Black,Mode=OneWay}" />
                        <MenuItem Header="背景を白色にする" Command="{Binding BookCommands[SetBackgroundWhite]}"
                              IsChecked="{Binding Background,Converter={StaticResource BackgroundStyleToBooleanConverter},ConverterParameter=White,Mode=OneWay}" />
                        <MenuItem Header="背景を画像に合わせた色にする" Command="{Binding BookCommands[SetBackgroundAuto]}"
                              IsChecked="{Binding Background,Converter={StaticResource BackgroundStyleToBooleanConverter},ConverterParameter=Auto,Mode=OneWay}" />
                        <MenuItem Header="背景をチェック模様にする" Command="{Binding BookCommands[SetBackgroundCheck]}"
                              IsChecked="{Binding Background,Converter={StaticResource BackgroundStyleToBooleanConverter},ConverterParameter=Check,Mode=OneWay}" />

                        <Separator/>
                        <MenuItem Header="フォルダーリストを表示" Command="{Binding BookCommands[ToggleVisibleFolderList]}"
                            IsChecked="{Binding IsVisibleFolderList}"/>
                        <MenuItem Header="ファイル情報を表示" Command="{Binding BookCommands[ToggleVisibleFileInfo]}"
                            IsChecked="{Binding IsVisibleFileInfo}"/>
                        <Separator/>
                        <MenuItem Header="スライドショー" Command="{Binding BookCommands[ToggleSlideShow]}"
                            IsChecked="{Binding BookHub.IsEnableSlideShow,Mode=OneWay}" />
                        <Separator/>
                        <MenuItem Header="タイトルバーを消す" Command="{Binding BookCommands[ToggleHideTitleBar]}"
                            IsChecked="{Binding IsHideTitleBar}"/>
                        <MenuItem Header="メニューを自動的に隠す" Command="{Binding BookCommands[ToggleHideMenu]}"
                            IsChecked="{Binding IsHideMenu}"/>
                        <MenuItem Header="常に手前に表示" Command="{Binding BookCommands[ToggleTopmost]}"
                            IsChecked="{Binding IsTopmost}"/>
                        <MenuItem Header="全画面表示" Command="{Binding BookCommands[ToggleFullScreen]}"
                            IsChecked="{Binding IsFullScreen}"/>
                    </MenuItem>

                    <MenuItem Header="移動(_J)">
                        <MenuItem Header="前のページに戻る"  Command="{Binding BookCommands[PrevPage]}"/>
                        <MenuItem Header="次のページへ進む"  Command="{Binding BookCommands[NextPage]}"/>
                        <MenuItem Header="1ページ戻る"  Command="{Binding BookCommands[PrevOnePage]}"/>
                        <MenuItem Header="1ページ進む"  Command="{Binding BookCommands[NextOnePage]}"/>
                        <MenuItem Header="最初のページに移動" Command="{Binding BookCommands[FirstPage]}"/>
                        <MenuItem Header="最後のページへ移動" Command="{Binding BookCommands[LastPage]}"/>
                        <Separator/>
                        <MenuItem Header="前のフォルダに移動"  Command="{Binding BookCommands[PrevFolder]}"/>
                        <MenuItem Header="次のフォルダへ移動"  Command="{Binding BookCommands[NextFolder]}"/>
                        <Separator/>
                        <MenuItem Header="フォルダはファイル名順" Command="{Binding BookCommands[SetFolderOrderByFileName]}"
                              IsChecked="{Binding BookHub.FolderOrder,Converter={StaticResource FolderOrderToBooleanConverter},ConverterParameter=FileName,Mode=OneWay}" />
                        <MenuItem Header="フォルダは日付順" Command="{Binding BookCommands[SetFolderOrderByTimeStamp]}"
                              IsChecked="{Binding BookHub.FolderOrder,Converter={StaticResource FolderOrderToBooleanConverter},ConverterParameter=TimeStamp,Mode=OneWay}" />
                        <MenuItem Header="フォルダはランダムな並び" Command="{Binding BookCommands[SetFolderOrderByRandom]}"
                              IsChecked="{Binding BookHub.FolderOrder,Converter={StaticResource FolderOrderToBooleanConverter},ConverterParameter=Random,Mode=OneWay}" />
                    </MenuItem>

                    <MenuItem Header="ページ(_P)">
                        <MenuItem x:Name="PageMode1MenuItem" Header="1ページ表示" Command="{Binding BookCommands[SetPageMode1]}"
                              IsChecked="{Binding BookSetting.PageMode,Converter={StaticResource PageModeToBooleanConverter},ConverterParameter=SinglePage,Mode=OneWay}" />
                        <MenuItem x:Name="PageMode2MenuItem" Header="2ページ表示" Command="{Binding BookCommands[SetPageMode2]}"
                              IsChecked="{Binding BookSetting.PageMode,Converter={StaticResource PageModeToBooleanConverter},ConverterParameter=WidePage,Mode=OneWay}" />
                        <Separator/>
                        <MenuItem Header="右開き" Command="{Binding BookCommands[SetBookReadOrderRight]}"
                              IsChecked="{Binding BookSetting.BookReadOrder,Converter={StaticResource BookReadOrderToBooleanConverter},ConverterParameter=RightToLeft,Mode=OneWay}" />
                        <MenuItem Header="左開き" Command="{Binding BookCommands[SetBookReadOrderLeft]}"
                              IsChecked="{Binding BookSetting.BookReadOrder,Converter={StaticResource BookReadOrderToBooleanConverter},ConverterParameter=LeftToRight,Mode=OneWay}" />
                        <Separator/>
                        <MenuItem Header="横長ページを分割する" IsEnabled="{Binding ElementName=PageMode1MenuItem, Path=IsChecked}"
                              Command="{Binding BookCommands[ToggleIsSupportedDividePage]}"
                              IsChecked="{Binding BookSetting.IsSupportedDividePage, Mode=OneWay}" />
                        <Separator/>
                        <MenuItem Header="横長ページを見開きとみなす" IsEnabled="{Binding ElementName=PageMode2MenuItem, Path=IsChecked}"
                              Command="{Binding BookCommands[ToggleIsSupportedWidePage]}"
                              IsChecked="{Binding BookSetting.IsSupportedWidePage, Mode=OneWay}" />
                        <MenuItem Header="最初のページを単独表示" IsEnabled="{Binding ElementName=PageMode2MenuItem, Path=IsChecked}"
                              Command="{Binding BookCommands[ToggleIsSupportedSingleFirstPage]}"
                              IsChecked="{Binding BookSetting.IsSupportedSingleFirstPage, Mode=OneWay}" />
                        <MenuItem Header="最後のページを単独表示" IsEnabled="{Binding ElementName=PageMode2MenuItem, Path=IsChecked}"
                              Command="{Binding BookCommands[ToggleIsSupportedSingleLastPage]}"
                              IsChecked="{Binding BookSetting.IsSupportedSingleLastPage, Mode=OneWay}" />
                        <Separator />
                        <MenuItem Header="サブフォルダも読み込む" Command="{Binding BookCommands[ToggleIsRecursiveFolder]}"
                              IsChecked="{Binding BookSetting.IsRecursiveFolder,Mode=OneWay}" />
                        <Separator />
                        <MenuItem Header="ファイル名昇順にする" Command="{Binding BookCommands[SetSortModeFileName]}"
                              IsChecked="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToBooleanConverter},ConverterParameter=FileName,Mode=OneWay}" />
                        <MenuItem Header="ファイル名降順にする" Command="{Binding BookCommands[SetSortModeFileNameDescending]}"
                              IsChecked="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToBooleanConverter},ConverterParameter=FileNameDescending,Mode=OneWay}" />
                        <MenuItem Header="日付昇順にする" Command="{Binding BookCommands[SetSortModeTimeStamp]}"
                              IsChecked="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToBooleanConverter},ConverterParameter=TimeStamp,Mode=OneWay}" />
                        <MenuItem Header="日付降順にする" Command="{Binding BookCommands[SetSortModeTimeStampDescending]}"
                              IsChecked="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToBooleanConverter},ConverterParameter=TimeStampDescending,Mode=OneWay}" />
                        <MenuItem Header="ランダムに並べる" Command="{Binding BookCommands[SetSortModeRandom]}"
                              IsChecked="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToBooleanConverter},ConverterParameter=Random,Mode=OneWay}" />
                    </MenuItem>

                    <MenuItem Header="設定(_O)">
                        <MenuItem Header="設定..." Command="{Binding BookCommands[OpenSettingWindow]}"/>
                        <Separator/>
                        <MenuItem Header="NeeView について..." Command="{Binding BookCommands[OpenVersionWindow]}"/>
                    </MenuItem>

                    <!-- 開発用メニュー -->
                    <MenuItem x:Name="MenuItemDev" Header="開発(_D)">
                        <MenuItem x:Name="MenuItemDevPageList" Header="ページリスト" IsCheckable="True" />
                        <MenuItem x:Name="MenuItemDevInfo" Header="情報エリア" IsCheckable="True" />
                        <MenuItem x:Name="MenuItemDevApplicationFolder" Header="アプリのフォルダを開く" Click="MenuItemDevApplicationFolder_Click" />
                        <MenuItem x:Name="MenuItemDevTempFolder" Header="テンポラリフォルダを開く" Click="MenuItemDevTempFolder_Click" />
                    </MenuItem>
                </Menu>

                <!-- Help button -->
                <DockPanel LastChildFill="False" VerticalAlignment="Center" Margin="0,0,10,0">
                    <Button DockPanel.Dock="Right"  x:Name="HelpButton" Style="{StaticResource IconButton}" VerticalAlignment="Center" Click="HelpButton_Click" ToolTip="オンラインヘルプ">
                        <Image Width="14" Height="14" Source="{StaticResource ic_help_24px}"/>
                    </Button>
                </DockPanel>
            </Grid>

            <!-- ステータスエリア -->
            <DockPanel x:Name="StatusArea" VerticalAlignment="Bottom">
                <Slider DockPanel.Dock="Bottom" x:Name="PageSlider" Maximum="{Binding IndexMax}" Value="{Binding Index}" IsMoveToPointEnabled="True" SmallChange="1" IsDirectionReversed="{Binding IsSliderDirectionReversed}" Focusable="False"
                        local:SliderTools.MoveToPointOnDrag="True" local:SliderTools.FocusTo="{Binding ElementName=MainView}">
                    <Slider.Style>
                        <Style TargetType="Slider">
                            <Style.Triggers>
                                <Trigger Property="Maximum" Value="0">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Slider.Style>
                </Slider>
            </DockPanel>

            <!-- Message Tiny -->
            <TextBlock x:Name="TinyInfoTextBlock" Text="{Binding TinyInfoText}" VerticalAlignment="Bottom" HorizontalAlignment="Left" Foreground="White" Background="#88000000" Padding="20,5" IsHitTestVisible="False">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Style.Triggers>
                            <Trigger Property="Text" Value="">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>

            <!-- Message -->
            <StackPanel x:Name="InfoTextArea" Orientation="Horizontal" Margin="0,0,0,60" VerticalAlignment="Bottom" HorizontalAlignment="Center" Background="#88000000" MaxWidth="{Binding ElementName=ViewArea, Path=ActualWidth}" IsHitTestVisible="False">
                <StackPanel.Style>
                    <Style TargetType="StackPanel">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=InfoTextBlock, Path=Text}" Value="">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StackPanel.Style>
                <StackPanel Orientation="Horizontal" Margin="20,10">
                    <Image x:Name="InfoBookmark" Width="{Binding InfoTextFontSize}" Height="{Binding InfoTextFontSize}" Margin="0,0,10,0" Source="{StaticResource ic_bookmark_24px}" />
                    <TextBlock x:Name="InfoTextBlock" Text="{Binding InfoText}" TextAlignment="Center" VerticalAlignment="Bottom" HorizontalAlignment="Center" FontSize="{Binding InfoTextFontSize}" Foreground="White" FontFamily="Meiryo" TextTrimming="CharacterEllipsis"/>
                </StackPanel>
            </StackPanel>

        </Grid>

    </DockPanel>
</Window>
