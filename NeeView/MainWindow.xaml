<!--
    Copyright (c) 2016 Mitsuhiro Ito (nee)

    This software is released under the MIT License.
    http://opensource.org/licenses/mit-license.php
-->

<Window x:Class="NeeView.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:NeeView"
        xmlns:osc="clr-namespace:OpenSourceControls"
        xmlns:nwc="clr-namespace:NeeView.Windows.Controls"
        mc:Ignorable="d"
        x:Name="RootWindow"
        Style="{StaticResource DefaultWindowStyle}"
        Title="{Binding WindowTitle.Title}" Icon="{Binding WindowIcon}" Height="768" Width="1024" MinHeight="50" MinWidth="150" AllowDrop="True"
        Loaded="MainWindow_Loaded" Closed="Window_Closed" Closing="Window_Closing" SourceInitialized="Window_SourceInitialized"
        DragOver="MainWindow_DragOver" Drop="MainWindow_Drop" MouseLeave="MainWindow_MouseLeave"
        StateChanged="MainWindow_StateChanged"
        DpiChanged="MainWindow_DpiChanged"
        PreviewKeyDown="Window_PreviewKeyDown">


    <Window.Resources>

        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="SidePanels/PanelIconDictionary.xaml"/>
            </ResourceDictionary.MergedDictionaries>


            <!-- コンテキストメニューカウント用 -->
            <Style TargetType="ContextMenu">
                <EventSetter Event="Opened" Handler="ContextMenu_Opened"/>
                <EventSetter Event="Closed" Handler="ContextMenu_Closed"/>
            </Style>


            <!-- Styling the DockPanelSplitter -->
            <Style x:Key="NVHorizontalBevelGrip" TargetType="{x:Type osc:DockPanelSplitter}">
                <Setter Property="Thickness" Value="6"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type osc:DockPanelSplitter}">
                            <Grid SnapsToDevicePixels="True" Background="{DynamicResource NVBackground}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="NVVerticalBevelGrip" TargetType="{x:Type osc:DockPanelSplitter}">
                <Setter Property="Thickness" Value="6"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type osc:DockPanelSplitter}">
                            <Grid SnapsToDevicePixels="True" Background="{DynamicResource NVBackground}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="StatusAreaStyle" TargetType="DockPanel">
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsVisibleThumbnailPlate}" Value="True" />
                            <Condition Binding="{Binding Visibility, ElementName=ThumbnailListArea}" Value="Visible" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource NVBackground}"/>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>


            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

            <local:IsNearZeroConverter x:Key="IsNearZeroConverter"/>

            <local:SortModeToVisibilityConverter x:Key="SortModeToVisibilityConverter"/>
            <local:SortModeToStringConverter x:Key="SortModeToStringConverter"/>

            <local:DpiScaleXInverseConverter x:Key="DpiScaleXInverseConverter"/>
            <local:DpiScaleYInverseConverter x:Key="DpiScaleYInverseConverter"/>

            <local:SliderDirectionToFlowDirectionConverter x:Key="SliderDirectionToFlowDirectionConverter"/>

            <local:NullableToVisibilityConverter x:Key="NullableToVisibilityConverter"/>


            <!-- MenuItem History -->

            <local:FullPathToFileNameConverter x:Key="FullPathToFileNameConverter"/>

            <Style x:Key="HistoryMenuItemContainerStyle" TargetType="MenuItem">
                <Setter Property="Header" Value="{Binding Path=Place, Converter={StaticResource FullPathToFileNameConverter}}"/>
                <Setter Property="Command" Value="{Binding DataContext.BookCommands[LoadAs], RelativeSource={RelativeSource FindAncestor, AncestorType=MenuItem}}" />
                <Setter Property="CommandParameter" Value="{Binding Path=Place}" />
                <Setter Property="InputGestureText" Value=""/>
            </Style>

            <Style x:Key="HistoryMenuItemStyle" TargetType="MenuItem">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=LastFilesHeader, Path=ItemsSource.Count}" Value="0" >
                        <Setter Property="IsEnabled" Value="False"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="HistoryContextMenuItemContainerStyle" TargetType="MenuItem">
                <Setter Property="Header" Value="{Binding Converter={StaticResource FullPathToFileNameConverter}}"/>
                <Setter Property="Command" Value="{Binding DataContext.MoveToHistory, RelativeSource={RelativeSource FindAncestor, AncestorType=ContextMenu}}" />
                <Setter Property="CommandParameter" Value="{Binding}" />
            </Style>

        </ResourceDictionary>

    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}"
                        Executed="CloseWindowCommand_Execute"/>
        <CommandBinding Command="{x:Static SystemCommands.RestoreWindowCommand}"
                        Executed="RestoreWindowCommand_Execute"/>
        <CommandBinding Command="{x:Static SystemCommands.MaximizeWindowCommand}"
                        Executed="MaximizeWindowCommand_Execute"/>
        <CommandBinding Command="{x:Static SystemCommands.MinimizeWindowCommand}"
                        Executed="MinimizeWindowCommand_Execute"/>
    </Window.CommandBindings>
    
    <Border BorderThickness="{Binding WindowShape.WindowBorderThickness}">
        <Border.Style>
            <Style TargetType="Border">
                <Setter Property="BorderBrush" Value="Gray"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ElementName=RootWindow, Path=IsActive}" Value="True">
                        <Setter Property="BorderBrush" Value="{x:Static SystemParameters.WindowGlassBrush}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Border.Style>
        
        <DockPanel x:Name="RootDockPanel" UseLayoutRounding="True">

            <!-- 製品表示領域 -->
            <Grid x:Name="Root" MouseMove="ViewArea_MouseMove" UseLayoutRounding="True">
                <Grid x:Name="RootBottom" VerticalAlignment="Bottom" />

                <!-- Main Layer -->
                <DockPanel>

                    <!-- メニューエリア-->
                    <ContentControl x:Name="DockMenuSocket" DockPanel.Dock="Top" IsTabStop="False">
                        <Grid x:Name="MenuArea" MouseEnter="MenuArea_MouseEnter" MouseLeave="MenuArea_MouseLeave" >
                            <StackPanel>
                                <Grid x:Name="MenuBar" KeyDown="Control_KeyDown_IgnoreSingleKeyGesture" Background="White">
                                    <DockPanel LastChildFill="False">
                                        <local:WindowCaptionButtons x:Name="WindowCaptionButtons" VerticalAlignment="Top" DockPanel.Dock="Right">
                                            <local:WindowCaptionButtons.Style>
                                                <Style TargetType="local:WindowCaptionButtons">
                                                    <Setter Property="Height" Value="28"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding WindowCaptionEmulator.IsEnabled}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding ElementName=RootWindow, Path=WindowState}" Value="Maximized">
                                                            <Setter Property="Height" Value="24"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </local:WindowCaptionButtons.Style>
                                        </local:WindowCaptionButtons>

                                        <!-- メインメニュー -->
                                        <ContentControl x:Name="MainMenuJoint" Content="{Binding MainMenu}" IsTabStop="False" VerticalAlignment="Bottom"
                                          Background="White"
                                          Foreground="#222"/>

                                        <!-- 開発用メニュー -->
                                        <Menu VerticalAlignment="Bottom"
                                          Background="White"
                                          Foreground="#222">
                                            <MenuItem x:Name="MenuItemDev" Header="開発(_D)">
                                                <MenuItem x:Name="MenuItemDevPageList" Header="ページリスト" IsCheckable="True" IsChecked="{Binding IsVisibleDevPageList}" />
                                                <MenuItem x:Name="MenuItemDevInfo" Header="情報エリア" IsCheckable="True" IsChecked="{Binding IsVisibleDevInfo}" />
                                                <MenuItem x:Name="MenuItemDevApplicationFolder" Header="アプリのフォルダーを開く" Click="MenuItemDevApplicationFolder_Click" />
                                                <MenuItem x:Name="MenuItemDevApplicationDataFolder" Header="アプリデータフォルダーを開く" Click="MenuItemDevApplicationDataFolder_Click" />
                                                <MenuItem x:Name="MenuItemDevTempFolder" Header="テンポラリフォルダーを開く" Click="MenuItemDevTempFolder_Click" />
                                                <MenuItem x:Name="MenuItemDevButton" Header="テスト実行" Click="MenuItemDevButton_Click" />
                                            </MenuItem>
                                        </Menu>
                                    </DockPanel>

                                </Grid>

                                <!-- アドレスバー -->
                                <Grid x:Name="AddressBar" VerticalAlignment="Top" Height="36" Visibility="{Binding IsVisibleAddressBar, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <Grid.Resources>
                                        <Style x:Key="AddressIconButton" TargetType="Button" BasedOn="{StaticResource IconButton}">
                                            <Setter Property="Width" Value="26"/>
                                            <Setter Property="Height" Value="26"/>
                                            <Setter Property="Padding" Value="4"/>
                                            <Setter Property="VerticalAlignment" Value="Center"/>
                                            <Setter Property="IsTabStop" Value="False"/>
                                        </Style>
                                    </Grid.Resources>

                                    <Grid.Background>
                                        <SolidColorBrush Color="White"/>
                                    </Grid.Background>

                                    <DockPanel VerticalAlignment="Center" Margin="2,0">
                                        <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" UseLayoutRounding="True">

                                            <Button Style="{StaticResource AddressIconButton}" Command="{Binding BookCommands[TogglePageMode]}">
                                                <Image Width="18" Height="18">
                                                    <Image.Style>
                                                        <Style TargetType="Image">
                                                            <Setter Property="Source" Value="{StaticResource ic_looks_one_24px}"/>
                                                            <Setter Property="ToolTip" Value="1ページ表示"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding BookSetting.PageMode}"  Value="WidePage">
                                                                    <Setter Property="Source" Value="{StaticResource ic_looks_two_24px}"/>
                                                                    <Setter Property="ToolTip" Value="2ページ表示"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Image.Style>
                                                </Image>
                                            </Button>

                                            <Button Style="{StaticResource AddressIconButton}" Command="{Binding BookCommands[ToggleBookReadOrder]}" >
                                                <Grid Width="22" Height="22" Background="#0000">
                                                    <Image Width="18" Height="18">
                                                        <Image.Style>
                                                            <Style TargetType="Image">
                                                                <Setter Property="Source" Value="{StaticResource ic_left_to_right_24px}"/>
                                                                <Setter Property="ToolTip" Value="左開き"/>
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding BookSetting.BookReadOrder}"  Value="RightToLeft">
                                                                        <Setter Property="Source" Value="{StaticResource ic_right_to_left_24px}"/>
                                                                        <Setter Property="ToolTip" Value="右開き"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </Image.Style>
                                                    </Image>
                                                </Grid>
                                            </Button>


                                            <Button Style="{StaticResource AddressIconButton}" Command="{Binding BookCommands[ToggleSortMode]}" 
                                        ToolTip="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToStringConverter}}">

                                                <Grid Width="20" Height="20">
                                                    <Grid.Resources>
                                                        <Style TargetType="Grid">
                                                            <Setter Property="Width" Value="16"/>
                                                            <Setter Property="Height" Value="16"/>
                                                        </Style>
                                                        <Style TargetType="Image" x:Key="MainImage">
                                                            <Setter Property="Width" Value="12"/>
                                                            <Setter Property="Height" Value="12"/>
                                                            <Setter Property="VerticalAlignment" Value="Bottom"/>
                                                            <Setter Property="HorizontalAlignment" Value="Left"/>
                                                        </Style>
                                                        <Style TargetType="Image" x:Key="SubImage">
                                                            <Setter Property="Width" Value="8"/>
                                                            <Setter Property="Height" Value="8"/>
                                                            <Setter Property="VerticalAlignment" Value="Top"/>
                                                            <Setter Property="HorizontalAlignment" Value="Right"/>
                                                        </Style>

                                                    </Grid.Resources>

                                                    <Grid Visibility="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToVisibilityConverter},ConverterParameter=Random}">
                                                        <Image Width="16" Height="16" Source="{StaticResource ic_shuffle_24px}"/>
                                                    </Grid>

                                                    <Grid Visibility="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToVisibilityConverter},ConverterParameter=FileName}">
                                                        <Image Style="{StaticResource MainImage}" Source="{StaticResource ic_sort_name_24px}"/>
                                                        <Image Style="{StaticResource SubImage}" Source="{StaticResource ic_sortex_up_24px}"/>
                                                    </Grid>

                                                    <Grid Visibility="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToVisibilityConverter},ConverterParameter=FileNameDescending}">
                                                        <Image Style="{StaticResource MainImage}" Source="{StaticResource ic_sort_name_24px}"/>
                                                        <Image Style="{StaticResource SubImage}" Source="{StaticResource ic_sortex_down_24px}"/>
                                                    </Grid>

                                                    <Grid Visibility="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToVisibilityConverter},ConverterParameter=TimeStamp}">
                                                        <Image Style="{StaticResource MainImage}" Source="{StaticResource ic_sort_time_24px}" Width="15" Height="15" Margin="-2,0,0,-2"/>
                                                        <Image Style="{StaticResource SubImage}" Source="{StaticResource ic_sortex_up_24px}"/>
                                                    </Grid>

                                                    <Grid Visibility="{Binding BookSetting.SortMode,Converter={StaticResource SortModeToVisibilityConverter},ConverterParameter=TimeStampDescending}">
                                                        <Image Style="{StaticResource MainImage}" Source="{StaticResource ic_sort_time_24px}" Width="15" Height="15" Margin="-2,0,0,-2"/>
                                                        <Image Style="{StaticResource SubImage}" Source="{StaticResource ic_sortex_down_24px}"/>
                                                    </Grid>

                                                </Grid>
                                            </Button>

                                        </StackPanel>

                                        <Button x:Name="PrevHistoryButton" Command="{Binding BookCommands[PrevHistory]}" Style="{StaticResource AddressIconButton}"
                                    ContextMenuService.Placement="Bottom"
                                    ContextMenuOpening="PrevHistoryButton_ContextMenuOpening"
                                    ToolTip="戻る">
                                            <Image Source="{StaticResource ic_arrow_back_24px}" Width="16" Height="16" />
                                            <Button.ContextMenu>
                                                <ContextMenu ItemContainerStyle="{StaticResource HistoryContextMenuItemContainerStyle}" />
                                            </Button.ContextMenu>
                                        </Button>
                                        <Button x:Name="NextHistoryButton" Command="{Binding BookCommands[NextHistory]}"  Style="{StaticResource AddressIconButton}"
                                    ContextMenuService.Placement="Bottom"
                                    ContextMenuOpening="NextHistoryButton_ContextMenuOpening"
                                    ToolTip="進む">
                                            <Image Source="{StaticResource ic_arrow_forward_24px}" Width="16" Height="16" />
                                            <Button.ContextMenu>
                                                <ContextMenu ItemContainerStyle="{StaticResource HistoryContextMenuItemContainerStyle}" />
                                            </Button.ContextMenu>
                                        </Button>
                                        <Button Command="{Binding BookCommands[ReLoad]}" Style="{StaticResource AddressIconButton}"
                                    ToolTip="再読込">
                                            <Image Source="{StaticResource ic_reflesh_24px}" Width="16" Height="16" />
                                        </Button>

                                        <Border x:Name="AddressTextBoxBase" BorderThickness="1" BorderBrush="LightGray" Background="White" Height="26" Margin="2,0">
                                            <DockPanel>
                                                <Button DockPanel.Dock="Right" Style="{StaticResource AddressIconButton}" Command="{Binding BookCommands[ToggleBookmark]}">
                                                    <TextBlock FontSize="20" FontFamily="Meyrio">
                                                        <TextBlock.Style>
                                                            <Style TargetType="TextBlock">
                                                                <Setter Property="Text" Value="☆"/>
                                                                <Setter Property="Foreground" Value="LightGray"/>
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding IsBookmark}" Value="True">
                                                                        <Setter Property="Text" Value="★"/>
                                                                        <Setter Property="Foreground" Value="{StaticResource NVStarMarkBrush}"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </TextBlock.Style>
                                                    </TextBlock>
                                                </Button>

                                                <TextBox x:Name="AddressTextBox" Text="{Binding Address}" BorderThickness="0" VerticalAlignment="Center" Margin="5,0"
                                             KeyDown="AddressTextBox_KeyDown"/>
                                            </DockPanel>
                                        </Border>

                                    </DockPanel>
                                </Grid>

                            </StackPanel>
                        </Grid>
                    </ContentControl>

                    <!-- ステータスエリア -->
                    <DockPanel x:Name="DockStatusArea" DockPanel.Dock="Bottom" Background="{DynamicResource NVBaseBrush}">

                        <!-- スライダー -->
                        <ContentControl x:Name="DockPageSliderSocket" DockPanel.Dock="Bottom" IsTabStop="False">
                            <local:PageSlider x:Name="SliderArea" ViewModel="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}" FocusTo="{Binding ElementName=MainView}"/>
                        </ContentControl>

                        <!-- サムネイルリスト -->
                        <ContentControl x:Name="DockThumbnailListSocket" DockPanel.Dock="Bottom" IsTabStop="False">
                            <local:ThumbnailList x:Name="ThumbnailListArea" ViewModel="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}"/>
                        </ContentControl>

                    </DockPanel>

                    <!--  ビューエリア -->
                    <Grid x:Name="ViewArea">

                        <!-- ビューエリア ベース -->
                        <Grid x:Name="ViewAreaBase"/>

                        <!-- サイドパネル と メインビュー -->
                        <Grid x:Name="Panels">

                            <!-- メインビュー パネル領域 -->
                            <Canvas>
                                <Grid x:Name="MainViewPanelRect" Canvas.Left="{Binding CanvasLeft, ElementName=SidePanelFrame}" Canvas.Top="{Binding CanvasTop, ElementName=SidePanelFrame}" Width="{Binding CanvasWidth}" Height="{Binding CanvasHeight}" UseLayoutRounding="True">

                                    <!-- メインビュー パネル -->
                                    <Grid x:Name="MainViewPanel" ContextMenu="{Binding ContextMenu}" Background="{Binding BackgroundBrush}" Margin="0">
                                        <Rectangle x:Name="FrontBackground" Fill="{Binding BackgroundFrontBrush}" RenderOptions.BitmapScalingMode="HighQuality" IsHitTestVisible="False" Visibility="{Binding BackgroundFrontBrush, Converter={StaticResource NullableToVisibilityConverter}}"/>

                                        <Grid x:Name="MainViewCanvas" Effect="{Binding ImageEffector.Effect}">

                                            <!-- メインビュー コンテンツ表示領域 -->
                                            <Grid x:Name="MainView" Background="Transparent" SizeChanged="MainView_SizeChanged" Focusable="True" FocusVisualStyle="{x:Null}" ClipToBounds="True" DataContext="{Binding ContentCanvas}">
                                                <!-- Pages -->
                                                <Canvas x:Name="PageCanvas" Width="{Binding ElementName=MainContent, Path=ActualWidth}" Height="{Binding ElementName=MainContent, Path=ActualHeight}"
                                                        IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                    <Canvas.Resources>
                                                        <Style TargetType="TextBlock" x:Key="ContentProperty">
                                                            <Setter Property="Foreground" Value="White"/>
                                                            <Setter Property="Background" Value="#80000000"/>
                                                            <Setter Property="Padding" Value="10,5"/>
                                                            <Style.Triggers>
                                                                <Trigger Property="Text" Value="">
                                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Canvas.Resources>
                                                    <ContentControl x:Name="MainContent" IsTabStop="False">
                                                        <StackPanel x:Name="PageContents" Orientation="Horizontal">
                                                            <ContentControl x:Name="Content1" Content="{Binding Contents[1].View}" Width="{Binding Contents[1].Width}" Height="{Binding Contents[1].Height}" Focusable="False" />
                                                            <ContentControl x:Name="Content0" Content="{Binding Contents[0].View}" Width="{Binding Contents[0].Width}" Height="{Binding Contents[0].Height}" Focusable="False" Margin="{Binding ContentsMargin}"/>
                                                        </StackPanel>
                                                    </ContentControl>
                                                </Canvas>
                                                <!-- Pages Shadow (表示領域計算用) -->
                                                <Canvas Width="{Binding ElementName=MainContent, Path=ActualWidth}" Height="{Binding ElementName=MainContent, Path=ActualHeight}"
                                                        IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                    <StackPanel x:Name="MainContentShadow" Orientation="Horizontal">
                                                        <Rectangle x:Name="Content1Shadow" Visibility="Hidden" Fill="#88FF0000" Width="{Binding Contents[1].Width}" Height="{Binding Contents[1].Height}"/>
                                                        <Rectangle x:Name="Content0Shadow" Visibility="Hidden" Fill="#88FF0000" Width="{Binding Contents[0].Width}" Height="{Binding Contents[0].Height}" Margin="{Binding ContentsMargin}"/>
                                                    </StackPanel>
                                                </Canvas>
                                            </Grid>

                                        </Grid>

                                        <!-- empty pages message -->
                                        <Grid Visibility="{Binding ContentCanvas.IsVisibleEmptyPageMessage, Converter={StaticResource BooleanToVisibilityConverter}}" d:IsHidden="True"  IsHitTestVisible="False">
                                            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                <TextBlock  Text="表示できません" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="{StaticResource InfoTextFontSize}" FontFamily="Meiryo" Foreground="{Binding ForegroundBrush}"/>

                                                <TextBlock Text="{Binding EmptyPageMessage}" Foreground="{Binding ForegroundBrush}" HorizontalAlignment="Center" Margin="0,20,0,0" MinHeight="50" TextWrapping="Wrap" >
                                                    <TextBlock.Style>
                                                        <Style TargetType="TextBlock">
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                            <Style.Triggers>
                                                                <Trigger Property="Text" Value="">
                                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                                </Trigger>
                                                            </Style.Triggers>

                                                        </Style>
                                                    </TextBlock.Style>
                                                </TextBlock>
                                            </StackPanel>
                                        </Grid>

                                        <!-- caption -->
                                        <TextBlock x:Name="PageCaption" VerticalAlignment="Top" HorizontalAlignment="Left"
                                       Margin="{Binding ElementName=MainViewCanvas, Path=Margin}"
                                       Text="{Binding WindowTitle}" FontSize="16" Foreground="White"
                                       Padding="20,5"
                                       Background="#88000000">
                                            <TextBlock.Style>
                                                <Style TargetType="TextBlock">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                    <Style.Triggers>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding IsVisibleWindowTitle}" Value="True"/>
                                                                <Condition Binding="{Binding ElementName=LayerStatusArea, Path=Visibility}" Value="Visible"/>
                                                                <Condition Binding="{Binding ElementName=RootWindow, Path=WindowStyle}" Value="None"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </MultiDataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>

                                        <!-- loupe info -->
                                        <Grid Visibility="{Binding IsVisibleLoupeInfo, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Grid x:Name="LoupeInfo" VerticalAlignment="Top" HorizontalAlignment="Right"
                                      Visibility="{Binding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                                      Margin="{Binding ElementName=MainViewCanvas, Path=Margin}"
                                      Background="#88000000">
                                                <TextBlock Padding="20,5"  FontSize="16" Foreground="White"
                                           Text="{Binding LoupeScaleX, StringFormat={}×{0:.0}}"/>
                                            </Grid>
                                        </Grid>

                                        <!-- Now Loading -->
                                        <Grid x:Name="NowLoading" Opacity="0" IsHitTestVisible="False">
                                            <Grid.Style>
                                                <Style TargetType="Grid">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding ElementName=NowLoading, Path=Opacity, Converter={StaticResource IsNearZeroConverter}}" Value="True">
                                                            <Setter Property="Visibility" Value="Hidden"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Grid.Style>
                                            <Grid x:Name="NowLoadingNormal" Background="Black">
                                                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Orientation="Vertical">
                                                    <TextBlock x:Name="NowLoadingText" Text="Now Loading"  TextAlignment="Center" VerticalAlignment="Center"
                                                   Foreground="White" FontFamily="Meiryo" FontSize="{StaticResource InfoTextFontSize}" Margin="8" TextTrimming="CharacterEllipsis"/>
                                                    <Grid Width="50" Height="50">
                                                        <Rectangle Width="5" Height="25" Fill="#FF00B5FF" RenderTransformOrigin="0.5,0.5">
                                                            <Rectangle.RenderTransform>
                                                                <TransformGroup>
                                                                    <ScaleTransform/>
                                                                    <SkewTransform/>
                                                                    <RotateTransform x:Name="NowLoadingMarkAngle" Angle="45"/>
                                                                    <TranslateTransform/>
                                                                </TransformGroup>
                                                            </Rectangle.RenderTransform>
                                                        </Rectangle>
                                                    </Grid>
                                                </StackPanel>
                                            </Grid>

                                            <TextBlock x:Name="NowLoadingTiny" Text="Now Loading ..." VerticalAlignment="Bottom" HorizontalAlignment="Right" Foreground="White" Background="#88000000" Padding="20,5" IsHitTestVisible="False"/>
                                        </Grid>

                                        <!-- Message Tiny -->
                                        <local:TinyInfoMessageView Source="{Binding Models.InfoMessage.TinyInfoMessage}"/>

                                        <!-- IsBusy -->
                                        <Grid Margin="{Binding ElementName=MainViewCanvas, Path=Margin}">
                                            <Rectangle Fill="SteelBlue" Width="5" Height="5" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="5" Visibility="{Binding IsBusyJobEngine, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                        </Grid>

                                    </Grid>

                                    <!--
                                <Border BorderBrush="Red" BorderThickness="2"/>
                                -->
                                </Grid>
                            </Canvas>


                            <!-- サイドパネル -->
                            <local:SidePanelFrameView x:Name="SidePanelFrame" PanelMargin="{Binding SidePanelMargin, Mode=OneWay}" Visibility="Visible"
                                      Source="{Binding Models.SidePanel}"
                                      IsAutoHide="{Binding CanHidePanel}"
                                      PanelBackground="{DynamicResource NVBackground}"
                                      IconBackground="{DynamicResource NVPanelIconBackground}"
                                      CanvasWidth="{Binding CanvasWidth, Mode=OneWayToSource}"
                                      CanvasHeight="{Binding CanvasHeight, Mode=OneWayToSource}"
                                      MouseTarget="{Binding ElementName=Root}">
                            </local:SidePanelFrameView>

                        </Grid>

                    </Grid>

                </DockPanel>


                <!-- Menu Layer -->
                <ContentControl x:Name="LayerMenuSocket" VerticalAlignment="Top" Visibility="Collapsed" IsTabStop="False"/>

                <!-- Status Layer -->
                <DockPanel x:Name="LayerStatusArea" VerticalAlignment="Bottom" Visibility="Collapsed">
                    <Grid DockPanel.Dock="Bottom" Height="{Binding ElementName=DockStatusArea, Path=ActualHeight}"/>
                    <ContentControl x:Name="LayerPageSliderSocket" DockPanel.Dock="Bottom" IsTabStop="False"/>
                    <Grid DockPanel.Dock="Bottom">
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsVisibleThumbnailPlate}" Value="True">
                                        <Setter Property="Background" Value="{DynamicResource NVBaseBrush}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>
                        <ContentControl x:Name="LayerThumbnailListSocket" IsTabStop="False"/>
                    </Grid>
                </DockPanel>

                <!-- Message Layer -->
                <DockPanel >
                    <Grid DockPanel.Dock="Bottom" Height="{Binding ElementName=DockStatusArea, Path=ActualHeight}"/>
                    <local:NormalInfoMessageView Source="{Binding Models.InfoMessage.NormalInfoMessage}"/>
                </DockPanel>

                <!-- Rename manager -->
                <local:RenameManager x:Name="RenameManager" d:IsHidden="True"/>

            </Grid>

        </DockPanel>
    </Border>
</Window>
