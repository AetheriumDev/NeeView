<Window x:Class="NeeView.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:NeeView"
        xmlns:osc="clr-namespace:OpenSourceControls" xmlns:nwc="clr-namespace:NeeView.Windows.Controls" xmlns:properties="clr-namespace:NeeView.Properties"
        xmlns:behaviors="http://schemas.microsoft.com/xaml/behaviors" mc:Ignorable="d" x:Name="RootWindow" Style="{StaticResource DefaultWindowStyle}" BorderBrush="Black"
        Title="{Binding WindowTitle.Title}" Icon="{Binding WindowIcon}" d:DesignHeight="768" d:DesignWidth="1024" MinHeight="50" MinWidth="150" SourceInitialized="MainWindow_SourceInitialized"
        Loaded="MainWindow_Loaded" ContentRendered="MainWindow_ContentRendered" Closed="MainWindow_Closed" Closing="MainWindow_Closing" Activated="MainWindow_Activated"
        Deactivated="MainWindow_Deactivated" MouseLeave="MainWindow_MouseLeave" StateChanged="MainWindow_StateChanged" DpiChanged="MainWindow_DpiChanged">


    <Window.Resources>

        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="MainWindowResourceDictionary.xaml" />
                <ResourceDictionary Source="/SidePanels/PanelIconDictionary.xaml" />
                <ResourceDictionary Source="/SidePanels/Bookshelf/FolderList/FolderListIconDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!-- Styling the DockPanelSplitter -->
            <Style x:Key="NVHorizontalBevelGrip" TargetType="{x:Type osc:DockPanelSplitter}">
                <Setter Property="Thickness" Value="6" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type osc:DockPanelSplitter}">
                            <Grid SnapsToDevicePixels="True" Background="{DynamicResource NVBackground}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="NVVerticalBevelGrip" TargetType="{x:Type osc:DockPanelSplitter}">
                <Setter Property="Thickness" Value="6" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type osc:DockPanelSplitter}">
                            <Grid SnapsToDevicePixels="True" Background="{DynamicResource NVBackground}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>


            <Style x:Key="StatusAreaStyle" TargetType="DockPanel">
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Source={x:Static local:Config.Current}, Path=FilmStrip.IsVisiblePlate}" Value="True" />
                            <Condition Binding="{Binding Visibility, ElementName=ThumbnailListArea}" Value="Visible" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource NVBackground}" />
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>


            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <local:IsNearZeroConverter x:Key="IsNearZeroConverter" />
            <local:SortModeToVisibilityConverter x:Key="SortModeToVisibilityConverter" />
            <local:SortModeToStringConverter x:Key="SortModeToStringConverter" />
            <local:DpiScaleXInverseConverter x:Key="DpiScaleXInverseConverter" />
            <local:DpiScaleYInverseConverter x:Key="DpiScaleYInverseConverter" />
            <local:SliderDirectionToFlowDirectionConverter x:Key="SliderDirectionToFlowDirectionConverter" />
            <local:NullableToVisibilityConverter x:Key="NullableToVisibilityConverter" />
            <local:BooleanReverseConverter x:Key="BooleanReverseConverter" />
            <local:DoubleOffsetConverter x:Key="AutoHideMarginOffsetConverter" Offset="16" />
            <local:DoubleSumConverter x:Key="DoubleSumConverter" />
            <local:TypeToVisibilityConverter x:Key="MainViewToVisibilityConverter" Type="{x:Type local:MainView}" />

            <!-- MenuItem History -->
            <Style x:Key="HistoryMenuItemContainerStyle" TargetType="MenuItem">
                <Setter Property="Header" Value="{Binding Path=Name}" />
                <Setter Property="Command" Value="{x:Static local:LoadCommand.Command}" />
                <Setter Property="CommandParameter" Value="{Binding Path=Path}" />
                <Setter Property="InputGestureText" Value="" />
            </Style>

        </ResourceDictionary>

    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}" Executed="CloseWindowCommand_Execute" />
        <CommandBinding Command="{x:Static SystemCommands.RestoreWindowCommand}" Executed="RestoreWindowCommand_Execute" />
        <CommandBinding Command="{x:Static SystemCommands.MaximizeWindowCommand}" Executed="MaximizeWindowCommand_Execute" />
        <CommandBinding Command="{x:Static SystemCommands.MinimizeWindowCommand}" Executed="MinimizeWindowCommand_Execute" />
    </Window.CommandBindings>

    <Border BorderThickness="{Binding WindowShape.WindowBorder.Thickness}" BorderBrush="Gray">

        <!-- 製品表示領域 -->
        <Grid x:Name="Root" UseLayoutRounding="True" WindowChrome.IsHitTestVisibleInChrome="False">
            <Grid x:Name="RootBottom" VerticalAlignment="Bottom" />

            <!-- Main Layer -->
            <DockPanel>

                <!-- メニューエリア-->
                <ContentControl x:Name="DockMenuSocket" DockPanel.Dock="Top" Focusable="False" MouseEnter="DockMenuSocket_MouseEnter" MouseLeave="DockMenuSocket_MouseLeave">
                    <Grid x:Name="MenuArea">
                        <StackPanel>
                            <!-- メニューバー-->
                            <local:MenuBarView x:Name="MenuBar" IsUnactiveEnabled="{Binding WindowShape.CanCaptionVisible, Converter={StaticResource BooleanReverseConverter}}" />

                            <!-- アドレスバー -->
                            <local:AddressBarView x:Name="AddressBar" VerticalAlignment="Top"
                                    Visibility="{Binding Source={x:Static local:Config.Current}, Path=MenuBar.IsAddressBarEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                                    IsTabStop="False" />

                        </StackPanel>
                    </Grid>
                </ContentControl>

                <!-- ステータスエリア -->
                <DockPanel x:Name="DockStatusArea" DockPanel.Dock="Bottom" Background="{DynamicResource NVBaseBrush}" MouseEnter="DockStatusArea_MouseEnter" MouseLeave="DockStatusArea_MouseLeave">

                    <!-- スライダー -->
                    <ContentControl x:Name="DockPageSliderSocket" DockPanel.Dock="Bottom" IsTabStop="False">
                        <Grid x:Name="SliderArea">
                            <local:PageSliderView x:Name="PageSliderView" VerticalAlignment="Bottom" />
                            <local:MediaControlView x:Name="MediaControlView" VerticalAlignment="Bottom" />
                        </Grid>
                    </ContentControl>

                    <!-- フィルムストリップ -->
                    <ContentControl x:Name="DockThumbnailListSocket" DockPanel.Dock="Bottom" IsTabStop="False">
                        <local:ThumbnailListView x:Name="ThumbnailListArea" />
                    </ContentControl>

                </DockPanel>

                <!--  ビューエリア -->
                <Grid x:Name="ViewArea">

                    <!-- ビューエリア ベース -->
                    <Grid x:Name="ViewAreaBase" />

                    <!-- サイドパネル と メインビュー -->
                    <Grid x:Name="Panels">

                        <!-- メインビュー パネル領域 -->
                        <Canvas>
                            <Grid x:Name="MainViewPanelRect" Canvas.Left="{Binding CanvasLeft, ElementName=SidePanelFrame}" Canvas.Top="{Binding CanvasTop, ElementName=SidePanelFrame}"
                                    Width="{Binding CanvasWidth}" Height="{Binding CanvasHeight}" UseLayoutRounding="True">

                                <!-- メインビュー パネル -->
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                
                                    <ContentControl Grid.Row="1" x:Name="MainViewSocket" IsTabStop="False" />

                                    <Grid x:Name="PageCaption" Grid.Row="{Binding PageCaptionGridRow}" Height="30" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                            Background="{Binding Model.SliderBackgroundGlass}">
                                        <Grid.Style>
                                            <Style TargetType="Grid">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                                <Style.Triggers>
                                                    <MultiDataTrigger>
                                                        <MultiDataTrigger.Conditions>
                                                            <Condition Binding="{Binding Model.CanVisibleWindowTitle}" Value="True" />
                                                            <Condition Binding="{Binding ElementName=LayerStatusArea, Path=Visibility}" Value="Visible" />
                                                        </MultiDataTrigger.Conditions>
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </MultiDataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Grid.Style>
                                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Stretch" Text="{Binding WindowTitle.Title}" Foreground="{DynamicResource NVForeground}" Padding="10,0" />
                                    </Grid>
                                
                                </Grid>
                                
                                <!--
                                <Border BorderBrush="Red" BorderThickness="2"/>
                                -->
                            </Grid>
                        </Canvas>


                        <!-- サイドパネル -->
                        <local:SidePanelFrameView x:Name="SidePanelFrame" PanelMargin="{Binding SidePanelMargin, Mode=OneWay}" Visibility="Visible" Source="{Binding SidePanel}"
                                IsAutoHide="{Binding Model.CanHidePanel}" PanelBackground="{DynamicResource NVBackground}" IconBackground="{DynamicResource NVPanelIconBackground}"
                                CanvasWidth="{Binding CanvasWidth, Mode=OneWayToSource}" CanvasHeight="{Binding CanvasHeight, Mode=OneWayToSource}"
                                IsAutoHideMouseEnabled="{Binding IsFrontAreaMouseOver, Converter={StaticResource BooleanReverseConverter}}" d:IsHidden="True">
                        </local:SidePanelFrameView>

                    </Grid>

                </Grid>

            </DockPanel>


            <!-- Menu Layer -->
            <ContentControl x:Name="LayerMenuSocket" VerticalAlignment="Top" Visibility="Collapsed" Focusable="False" MouseEnter="LayerMenuSocket_MouseEnter" MouseLeave="LayerMenuSocket_MouseLeave">
                <behaviors:Interaction.Behaviors>
                    <local:AutoHideBehavior Name="MenuBar" Screen="{Binding ElementName=Root}" Dock="Top" IsEnabled="{Binding Model.CanHideMenu}" DelayTime="{Binding AutoHideConfig.AutoHideDelayTime}"
                            DelayVisibleTime="{Binding AutoHideConfig.AutoHideDelayVisibleTime}" FocusLockMode="{Binding AutoHideConfig.AutoHideFocusLockMode}"
                            IsVisibleLocked="{Binding Model.IsPanelVisibleLocked}" IsKeyDownDelayEnabled="{Binding AutoHideConfig.IsAutoHideKeyDownDelay}"
                            HitTestMargin="{Binding AutoHideConfig.AutoHideHitTestMargin}" Description="{Binding MenuAutoHideDescription}" />
                </behaviors:Interaction.Behaviors>
            </ContentControl>

            <!-- Status Layer -->
            <DockPanel x:Name="LayerStatusArea" VerticalAlignment="Bottom" Visibility="Visible" MouseEnter="LayerStatusArea_MouseEnter" MouseLeave="LayerStatusArea_MouseLeave">
                <behaviors:Interaction.Behaviors>
                    <local:AutoHideBehavior Screen="{Binding ElementName=Root}" Dock="Bottom" IsEnabled="{Binding Model.CanHidePageSlider}" DelayTime="{Binding AutoHideConfig.AutoHideDelayTime}"
                            DelayVisibleTime="{Binding AutoHideConfig.AutoHideDelayVisibleTime}" FocusLockMode="{Binding AutoHideConfig.AutoHideFocusLockMode}"
                            IsKeyDownDelayEnabled="{Binding AutoHideConfig.IsAutoHideKeyDownDelay}" HitTestMargin="{Binding AutoHideConfig.AutoHideHitTestMargin}"
                            Description="{Binding StatusAutoHideDescrption}" IsVisibleLocked="{Binding Model.IsPanelVisibleLocked}" />
                </behaviors:Interaction.Behaviors>
                <Grid x:Name="LayerStatusAreaPadding" DockPanel.Dock="Bottom" Height="{Binding ElementName=SliderArea, Path=ActualHeight}" />
                <Grid DockPanel.Dock="Bottom" Background="{Binding Model.SliderBackground}">
                    <ContentControl x:Name="LayerPageSliderSocket" IsTabStop="False" />
                </Grid>
                <Grid DockPanel.Dock="Bottom">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Source={x:Static local:Config.Current},  Path=FilmStrip.IsVisiblePlate}" Value="True">
                                    <Setter Property="Background" Value="{Binding Model.SliderBackground}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    <ContentControl x:Name="LayerThumbnailListSocket" IsTabStop="False">
                        <behaviors:Interaction.Behaviors>
                            <local:AutoHideBehavior Screen="{Binding ElementName=Root}" Dock="Bottom" IsEnabled="{Binding CanHideThumbnailList}" DelayTime="{Binding AutoHideConfig.AutoHideDelayTime}"
                                    DelayVisibleTime="{Binding AutoHideConfig.AutoHideDelayVisibleTime}" FocusLockMode="{Binding AutoHideConfig.AutoHideFocusLockMode}"
                                    IsKeyDownDelayEnabled="{Binding AutoHideConfig.IsAutoHideKeyDownDelay}" Description="{Binding ThumbnailListusAutoHideDescrption}"
                                    IsVisibleLocked="{Binding Model.IsPanelVisibleLocked}">
                                <local:AutoHideBehavior.HitTestMargin>
                                    <MultiBinding Converter="{StaticResource DoubleSumConverter}">
                                        <Binding ElementName="SliderArea" Path="ActualHeight" />
                                        <Binding Path="AutoHideConfig.AutoHideHitTestMargin" />
                                    </MultiBinding>
                                </local:AutoHideBehavior.HitTestMargin>
                            </local:AutoHideBehavior>
                        </behaviors:Interaction.Behaviors>
                    </ContentControl>
                </Grid>
            </DockPanel>

            <!-- Message Layer -->
            <DockPanel x:Name="MessageLayer" d:IsHidden="True" Visibility="{Binding ElementName=MainViewSocket, Path=Content, Converter={StaticResource MainViewToVisibilityConverter}}">
                <Grid DockPanel.Dock="Bottom" Height="{Binding ElementName=DockStatusArea, Path=ActualHeight}" />
                <local:NormalInfoMessageView Source="{Binding InfoMessage.NormalInfoMessage}" />
            </DockPanel>

            <!-- Rename manager -->
            <local:RenameManager x:Name="RenameManager" d:IsHidden="True" />

            <!-- Toast -->
            <ContentControl Content="{Binding ToastService.ToastCard}" Focusable="False" />

        </Grid>

    </Border>
</Window>
