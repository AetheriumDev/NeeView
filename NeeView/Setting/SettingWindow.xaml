<Window x:Class="NeeView.Setting.SettingWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:NeeView.Setting"
        xmlns:nv="clr-namespace:NeeView"  xmlns:nvp="clr-namespace:NeeView.Windows.Property" xmlns:nvc="clr-namespace:NeeView.Windows.Controls" xmlns:nvd="clr-namespace:NeeView.Windows.Data"
        xmlns:osc="clr-namespace:OpenSourceControls" xmlns:properties="clr-namespace:NeeView.Properties" mc:Ignorable="d" Style="{StaticResource ChromeWindowStyle}" ShowInTaskbar="True"
        Deactivated="Window_Deactivated" Closed="SettingWindow_Closed" Title="{x:Static properties:Resources.WindowSettingTitle}" Height="704" Width="960">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/NeeView/Windows/Property/PropertyValueTemplateDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>


            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <nvd:NotBoolToVisiblityConverter x:Key="NotBoolToVisiblityConverter" />
            <nv:BooleanToVisibilityConverter x:Key="NotBoolToHideVisiblityConverter" True="Hidden" False="Visible" />
            <local:BooleanToSwitchStringConverter x:Key="BooleanToSwitchStringConverter" />
            <nv:DoubleToPercentStringConverter x:Key="DoubleToPercentStringConverter" />
            <nvd:NullableToVisibilityConverter x:Key="NullableToVisibilityConverter" />


            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource NVScrollViewer}" />

            <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource NVListBox}">
                <Setter Property="BorderBrush" Value="{DynamicResource Control.Border}" />
                <Setter Property="BorderThickness" Value="1" />
            </Style>

            <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource NVListBoxItem}">
                <Setter Property="Padding" Value="5,2" />
            </Style>

            <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource NVComboBox}">
                <Setter Property="Foreground" Value="{DynamicResource Control.Foreground}" />
                <Setter Property="Background" Value="{DynamicResource DialogButton.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource DialogButton.Border}" />
                <Setter Property="BorderThickness" Value="1" />
            </Style>

            <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{StaticResource NVButton}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource NVBorderFocusVisual}" />
                <Setter Property="Margin" Value="0" />
            </Style>

            <Style TargetType="{x:Type nvc:FormattedTextBox}" BasedOn="{StaticResource NVTextBox}" />

            <Style TargetType="{x:Type nvc:DragCompletedTriggerSlider}" BasedOn="{StaticResource NVSlider}" />
            

            <Style x:Key="DisableStyle" TargetType="FrameworkElement">
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.5" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <DataTemplate DataType="{x:Type nvp:PropertyValue_Boolean}">
                <StackPanel Orientation="Horizontal" Style="{StaticResource DisableStyle}">
                    <nvc:ToggleSwitch IsChecked="{Binding Value}" Height="20" HorizontalAlignment="Left" />
                    <TextBlock Margin="10,0" VerticalAlignment="Center" Text="{Binding Value, Converter={StaticResource BooleanToSwitchStringConverter}}" />
                </StackPanel>
            </DataTemplate>

            <DataTemplate x:Key="RangeValueDataTemplate">
                <StackPanel>
                    <StackPanel>
                        <Grid Visibility="{Binding Range.IsEditable, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <nvc:EnterTriggerTextBox Text="{Binding Path=Value}" />
                            <TextBox Text="{Binding ElementName=RangeSlider, Path=Value}"
                                    Visibility="{Binding ElementName=RangeSlider, Path=IsMouseCaptureWithin, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        </Grid>
                        <local:FormattedTextBlock Value="{Binding ElementName=RangeSlider, Path=Value}" Format="{Binding Range.Format}"
                                Visibility="{Binding Range.IsEditable, Converter={StaticResource NotBoolToVisiblityConverter}}" />
                    </StackPanel>
                    <nvc:DragCompletedTriggerSlider x:Name="RangeSlider" Value="{Binding Value, UpdateSourceTrigger=Explicit}" Minimum="{Binding Range.Minimum}" Maximum="{Binding Range.Maximum}"
                            SmallChange="{Binding Range.SmallChange}" LargeChange="{Binding Range.LargeChange}" TickFrequency="{Binding Range.TickFrequency}" IsSnapToTickEnabled="True"
                            Margin="0,5,0,0" />
                </StackPanel>
            </DataTemplate>

            <DataTemplate x:Key="EditableRangeValueDataTemplate">
                <StackPanel>
                    <nvc:SliderValueTextBox Value="{Binding Path=Value}" SubValue="{Binding ElementName=RangeSlider, Path=Value}" Format="{Binding Range.Format}"
                            Converter="{Binding Range.Converter}" FormatConverter="{Binding Range.FormatConverter}"
                            IsSubValueEnabled="{Binding ElementName=RangeSlider, Path=IsMouseCaptureWithin}" />
                    <nvc:DragCompletedTriggerSlider x:Name="RangeSlider" Value="{Binding Value, UpdateSourceTrigger=Explicit}" Minimum="{Binding Range.Minimum}" Maximum="{Binding Range.Maximum}"
                            SmallChange="{Binding Range.SmallChange}" LargeChange="{Binding Range.LargeChange}" TickFrequency="{Binding Range.TickFrequency}" IsSnapToTickEnabled="True"
                            Margin="0,5,0,0" VerticalAlignment="Center" />
                </StackPanel>
            </DataTemplate>


            <DataTemplate x:Key="PercentValueDataTemplate">
                <StackPanel>
                    <StackPanel>
                        <Grid Visibility="{Binding Range.IsEditable, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <nvc:EnterTriggerTextBox Text="{Binding Path=Value, Converter={StaticResource DoubleToPercentStringConverter}}"
                                    Visibility="{Binding ElementName=RangeSlider, Path=IsMouseCaptureWithin, Converter={StaticResource NotBoolToVisiblityConverter}}"/>
                            <TextBox Text="{Binding ElementName=RangeSlider, Path=Value, Converter={StaticResource DoubleToPercentStringConverter}}"
                                    Visibility="{Binding ElementName=RangeSlider, Path=IsMouseCaptureWithin, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        </Grid>
                        <TextBlock Text="{Binding ElementName=RangeSlider, Path=Value, Converter={StaticResource DoubleToPercentStringConverter}}"
                                Visibility="{Binding Range.IsEditable, Converter={StaticResource NotBoolToVisiblityConverter}}" />
                    </StackPanel>
                    <nvc:DragCompletedTriggerSlider x:Name="RangeSlider" Value="{Binding Value, UpdateSourceTrigger=Explicit}" Minimum="{Binding Range.Minimum}" Maximum="{Binding Range.Maximum}"
                            SmallChange="{Binding Range.SmallChange}" LargeChange="{Binding Range.LargeChange}" TickFrequency="{Binding Range.TickFrequency}" IsSnapToTickEnabled="True"
                            Margin="0,5,0,0" />
                </StackPanel>
            </DataTemplate>

            <DataTemplate DataType="{x:Type nvp:PropertyValue_IntegerRange}">
                <ContentControl Content="{Binding}" ContentTemplate="{StaticResource RangeValueDataTemplate}" IsTabStop="False" />
            </DataTemplate>

            <DataTemplate DataType="{x:Type nvp:PropertyValue_EditableIntegerRange}">
                <ContentControl Content="{Binding}" ContentTemplate="{StaticResource EditableRangeValueDataTemplate}" IsTabStop="False" />
            </DataTemplate>

            <DataTemplate DataType="{x:Type nvp:PropertyValue_DoubleRange}">
                <ContentControl Content="{Binding}" ContentTemplate="{StaticResource RangeValueDataTemplate}" IsTabStop="False" />
            </DataTemplate>

            <DataTemplate DataType="{x:Type nvp:PropertyValue_EditableDoubleRange}">
                <ContentControl Content="{Binding}" ContentTemplate="{StaticResource EditableRangeValueDataTemplate}" IsTabStop="False" />
            </DataTemplate>

            <DataTemplate DataType="{x:Type nvp:PropertyValue_Percent}">
                <ContentControl Content="{Binding}" ContentTemplate="{StaticResource PercentValueDataTemplate}" IsTabStop="False" />
            </DataTemplate>

            <DataTemplate DataType="{x:Type nvp:PropertyValue_Color}">
                <DockPanel>
                    <nvc:EnterTriggerTextBox Text="{Binding Value}" MinWidth="100" BorderThickness="1,1,1,1" Padding="0,0,2,0" VerticalContentAlignment="Center" />
                    <osc:ComboColorPicker SelectedColor="{Binding Value, Mode=TwoWay}" />
                </DockPanel>
            </DataTemplate>


            <DataTemplate DataType="{x:Type nvp:PropertyTitleElement}">
                <TextBlock Text="{Binding Name}" TextTrimming="CharacterEllipsis" FontWeight="Bold" Margin="0,10,0,5" />
            </DataTemplate>

            <DataTemplate DataType="{x:Type nvp:PropertyMemberElement}">
                <nvp:PropertyControl Header="{Binding Name}" Value="{Binding TypeValue}" Tips="{Binding Tips}"
                        ColumnRate="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=ColumnRate}" />
            </DataTemplate>

        </ResourceDictionary>
    </Window.Resources>

    <DockPanel UseLayoutRounding="True">

        <Border DockPanel.Dock="Left" Width="250" Background="{DynamicResource SidePanel.Background}" BorderBrush="{DynamicResource SidePanel.Border}" BorderThickness="0,0,1,0">
            <DockPanel>

                <nvc:SearchBox DockPanel.Dock="Top" Margin="5,5,5,0" SearchKeyword="{Binding SearchKeyword}" />

                <TreeView x:Name="IndexTree" ItemsSource="{Binding Model.Pages}" BorderThickness="0" Margin="5,5,1,5" SelectedItemChanged="IndexTree_SelectedItemChanged">
                    <TreeView.Resources>
                        <Style TargetType="TreeViewItem" BasedOn="{StaticResource NVTreeViewItem}">
                            <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
                            <Setter Property="IsExpanded" Value="{Binding Path=IsExpanded, Mode=TwoWay}" />
                        </Style>
                    </TreeView.Resources>
                    <TreeView.ItemTemplate>
                        <HierarchicalDataTemplate DataType="local:SettingPage" ItemsSource="{Binding Children}">
                            <TextBlock Text="{Binding Header}" />
                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>
                </TreeView>

            </DockPanel>
        </Border>

        <ContentControl x:Name="PageContent" Content="{Binding CurrentPage.Content}" IsTabStop="False" FocusVisualStyle="{x:Null}" Margin="0,0,2,0" />

    </DockPanel>
</Window>
